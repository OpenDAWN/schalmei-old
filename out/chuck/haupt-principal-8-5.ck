5 => int peaks;
15 => int recs;
3 => int degs;

[ [ 0.0000000000502973346408206, -0.0000002198622308607858780, 0.0002773668049218784722142, 0.0263513562371166833175895], [0.0000000000697393888346891, -0.0000002400305025110371394, 0.0002309126592682184413077, -0.0020175257321592607838434], [0.0000000000221025548455276, -0.0000000585876726236843645, 0.0000307184192508142271975, 0.0104651185853199650555023], [0.0000000000119933455286090, -0.0000000358070379983678699, 0.0000275140707875449078775, -0.0011287266863666109342063], [0.0000000000035381003262400, -0.0000000108609997267615679, 0.0000089231386314055655281, -0.0008425579199664864167227 ] ] @=> float percs[][];

[ [    1.00000,    1.00000,    1.49806,    1.49914,    1.00000,    0.50000,    0.49939,    0.50000,    1.00000,    1.00000,    0.49988,    0.49892,    0.99674,    0.50000,    0.50008], [   1.50122,    0.49783,    1.00000,    0.49914,    0.49923,    1.49863,    1.00000,    1.00000,    0.49985,    0.50000,    1.00000,    0.99785,    0.49837,    1.00000,    1.00000], [   0.50122,    1.50000,    0.49806,    1.00000,    1.49923,    1.00000,    1.49939,    1.49939,    1.99969,    1.99973,    1.99976,    1.00000,    1.99329,    1.50000,    1.49992], [   2.00000,    1.99565,    0.98256,    1.99827,    2.00000,    1.99863,    2.00000,    1.99939,    0.99326,    3.49973,    2.99976,    1.99569,    1.49492,    2.00000,    2.00000], [   3.00244,    2.49565,    1.99612,    2.49914,    1.53775,    2.49863,    1.04162,    2.99939,    0.99204,    1.49973,    1.49988,    0.99268,    1.00000,    4.00017,    3.50008 ] ] @=> float harms[][];

[ 137.610626, 154.769897, 173.611450, 194.808197, 218.360138, 244.940186, 274.884796, 549.769592, 1098.529816, 1233.448792, 1388.555145, 1561.830139, 1753.946686, 1962.213135, 2197.396088 ] @=> float bases[];

fun float[] proc_harm(float freq)
{
	float ret[peaks];
	int i;
	0 => int idx;

	for(0 => i; i < recs; i++)
	{
		if(bases[i] < freq)
			i => idx;
	}

	for(0 => i; i < peaks; i++)
	{
		harms[i][idx] => ret[i];
	}

	return ret;
}

fun float[] proc_perc(float freq)
{
	float ret[peaks];
	int i;
	int j;

	for(0 => i; i < peaks; i++)
	{
		0 => ret[i];

		for(0 => j; j <= degs; j++)
		{
			percs[i][j] * Math.pow(freq, degs - j) +=> ret[i];
		}
	}

	return ret;
}

me.arg(0) => string freqstr;
if(freqstr.length() == 0) "440" => freqstr;
Std.atoi(freqstr) => float freq;

proc_harm(freq) @=> float harm[];
proc_perc(freq) @=> float perc[];

Pan2 p => dac;
SinOsc s[peaks];
for(0 => int i; i < peaks; i++)
{
	s[i] => p;
	harm[i] * freq => s[i].freq;
	perc[i] => s[i].gain;
	//<<< harm[i] * freq, "Hz,", perc[i], "gain" >>>;
}

while(true) 1::second => now;
